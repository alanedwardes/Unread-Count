var tabData = {};function getTabData(tab){	if(tabData[tab.windowId] && tabData[tab.windowId][tab.id])	{		return tabData[tab.windowId][tab.id];	}	else	{		return {			'originalFavicon': '',			'currentTitle': '',			'currentUrl': '',			'count': 0,		};	}}function createTabData(tab, force){	if(!tabData[tab.windowId])	{		tabData[tab.windowId] = {};	}	if(!tabData[tab.windowId][tab.id])	{		tabData[tab.windowId][tab.id] = {			'originalFavicon': tab.favIconUrl,			'currentTitle': '',			'currentUrl': tab.url,			'count': ''		};	}	else if(force)	{		tabData[tab.windowId][tab.id] = {			'originalFavicon': tab.favIconUrl,			'currentTitle': '',			'currentUrl': tab.url,			'count': ''		};	}}function updateTabData(tab, count){	if(tabData[tab.windowId][tab.id])	{		tabData[tab.windowId][tab.id]['currentTitle'] = tab.title;		tabData[tab.windowId][tab.id]['currentUrl'] = tab.url;		if(count && count != '')		{			tabData[tab.windowId][tab.id]['count'] = count;		}		else		{			tabData[tab.windowId][tab.id]['count'] = 0;		}	}}chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab){	if(changeInfo.status == 'complete' && getTabData(tab)['currentUrl'] != tab.url && tab.favIconUrl && tab.favIconUrl != getTabData(tab)['currentUrl'])	{		createTabData(tab, true);	}});setInterval(function(){	chrome.windows.getAll({'populate': true}, function(windows){		for(win in windows)		{			win = windows[win];			for(tab in win.tabs)			{				tab = win.tabs[tab];								tabMatch = false;				enabledSites = getSetting('enabled-sites', defaults['enabled-sites']).split('|');				for (i in enabledSites)				{					if (tab.url.match(enabledSites[i]))					{						tabMatch = true;					}				}								if (tabMatch || enabledSites == '')				{					if (tab.favIconUrl && !tab.favIconUrl.match('data:image/png;base64'))					{						createTabData(tab, true);					}					if (tab.favIconUrl)					{						shouldMonitor = true;						if (getSetting('only-pinned', defaults['only-pinned']) == 'on' && !tab.pinned)						{							shouldMonitor = false;						}						if (shouldMonitor)						{							createTabData(tab);							titleMatch(tab);						}					}				}			}		}	});}, 500);function titleMatch(tab){	if(tab.title != getTabData(tab)['currentTitle'] || getTabData(tab)['currentTitle'] != tab.url && getTabData(tab)['originalFavicon'])	{		titleInt = tab.title.match(/\(([0-9]+)\)/g);		if(titleInt)		{			titleInt = parseInt(titleInt[0].match(/[0-9]+/g));		}		if(titleInt && titleInt > 0)		{			if(getTabData(tab)['count'] != titleInt)			{				console.log('Updating tab ' + tab.id + '\'s icon to reflect ' + titleInt + ' unread items');				generateCountImage(titleInt, tab);			}		}		else if(tab.favIconUrl != getTabData(tab)['originalFavicon'])		{			console.log('Reverting tab ' + tab.id + '\'s icon to ' + getTabData(tab)['originalFavicon']);			unsetFavicon(tab);		}		updateTabData(tab, titleInt);	}}function unsetFavicon(tab){	changeFavicon(getTabData(tab)['originalFavicon'], tab);}function _chromeExtUnreadCountChangeFavicon(favicon){	var oldLink = document.getElementById('_chromeExtUnreadCountLink');	if(oldLink)	{		oldLink.parentNode.removeChild(oldLink);	}	var link = document.createElement('link');	link.type = 'image/x-icon';	link.rel = 'shortcut icon';	link.href = favicon;	link.id = '_chromeExtUnreadCountLink';	if (document.head.children.length > 0)	{		document.head.insertBefore(link, document.head.children[0]);	}	else	{		document.head.appendChild(link);	}}function changeFavicon(favicon, tab){	if(getTabData(tab)['originalFavicon'].match('data:image/png;base64'))	{		console.log('Can\'t change favicon, original is set to a base64 encoded image. Reload is necessary.');		return false;	}	else	{		chrome.tabs.executeScript(tab.id, {			'code': _chromeExtUnreadCountChangeFavicon.toString() + ';_chromeExtUnreadCountChangeFavicon("' + favicon + '");'		});	}}function closeToasts(tabId){	var notifications = chrome.extension.getViews({type: 'notification'});	if (notifications)	{		for (var i in notifications)		{			var w = notifications[i];			var hashSegments = w.location.hash.replace('#','').split('|');			var notificationTabId = parseInt(hashSegments[0]);			if(notificationTabId == tabId)			{				console.log('Closing ' + tabId);				w.close();			}		}	}}chrome.tabs.onActivated.addListener(function(tabId, selectInfo){	return closeToasts(tabId);});function createPopup(tab, count){	closeToasts(tab.id);	chrome.tabs.getSelected(null, function(t){		if(t.id != tab.id)		{			console.log('Popping up');			var notification = new Notification(count + ' unread item' + (count > 1 ? 's' : '') + ' on ' + tab.url.split(/\/+/g)[1].replace('www.','') + ', click to switch tab.', {				'icon': getTabData(tab)['originalFavicon']			});						notification.onclick = function(){				chrome.tabs.update(tab.id, {'selected': true});				notification.close();			};		}	});}function generateCountImage(count, tab){	if(getSetting('notifications', defaults['notifications']) == 'on')	{		createPopup(tab, count);	}	if(count > 99)	{		count = 99;	}	var favicon = new Image();	favicon.onload = function()	{		var canvas = document.getElementById('canvas');		var context = canvas.getContext('2d');		context.clearRect(0, 0, canvas.width, canvas.height);		context.textAlign = "end";		context.font = getSetting('font-size', defaults['font-size'])  + " '" + getSetting('font-family', defaults['font-family']) + "' " + getSetting('font-weight', defaults['font-weight']);		//context.font = "9px Tahoma bold";		textMetrics = context.measureText(count);		context.drawImage(favicon, 0, 0, 16, 16);				context.fillStyle = getSetting('background-colour', defaults['background-colour']);		//context.fillStyle = "rgba(200, 0, 0, 0.8)";		context.fillRect(14 - textMetrics.width, 14 - getSetting('font-size', defaults['font-size']), 20, 20)		context.fillStyle = getSetting('font-colour', defaults['font-colour'])		context.fillText(count, 15, 14);				changeFavicon(canvas.toDataURL("image/png"), tab);	}	if(getTabData(tab)['originalFavicon'] != 'undefined')	{		favicon.src = getTabData(tab)['originalFavicon'];	}}